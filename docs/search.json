[{"path":"/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"/articles/Example-analysis.html","id":"question","dir":"Articles","previous_headings":"","what":"Question","title":"Example analysis","text":"factors affect pet cat’s hours indoor?","code":""},{"path":"/articles/Example-analysis.html","id":"data-source","dir":"Articles","previous_headings":"","what":"Data Source","title":"Example analysis","text":"data comes Movebank Animal Tracking Data via Data Plural. initial intent dataset impact domestic cats native prey. data contains information one hundred (specifically 101) volunteers’ cat information age, sex, neuter status, hunting habits, time-stamped GPS pings. Link data source: McDonald JL, Cole H (2020) Data : small home ranges large local ecological impacts pet cats [United Kingdom]. Movebank Data Repository. doi:10.5441/001/1.pf315732 Link data dictionary: https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-01-31/readme.md","code":""},{"path":"/articles/Example-analysis.html","id":"load-data-into-r","dir":"Articles","previous_headings":"","what":"Load data into R","title":"Example analysis","text":"following code chunk can read data tidytuesdayR. save file locally, chunk run first clone directory data saved data folder","code":"tuesdata <- tidytuesdayR::tt_load('2023-01-31') tuesdata <- tidytuesdayR::tt_load(2023, week = 5)  cats_uk <- tuesdata$cats_uk cats_uk_reference <- tuesdata$cats_uk_reference # function to test if the directory exists, and create one if not data_dir <- function(folder) {   if(!file.exists(paste(here::here(), folder, sep=\"/\"))) {     dir.create(paste(here::here(), folder, sep=\"/\"))     } } data_dir(\"data\")  # save the data only once # write.csv(cats_uk_reference, #           file=paste(here::here(), 'data/cats_uk_reference.csv', sep=\"/\"), #           row.names = FALSE)  # load the data locally df <- read.csv(paste(here::here(), 'data/cats_uk_reference.csv', sep=\"/\"))"},{"path":"/articles/Example-analysis.html","id":"data-wrangling-and-visualization","dir":"Articles","previous_headings":"","what":"Data Wrangling and Visualization","title":"Example analysis","text":"First , let’s take look basic information dataset basics mean variance numeric variables. shown using purrr functions 44 female cats 57 male cats demonstration waffle package. can visualize counts female male square pie charts, able show proportion data directly Fig 1: Proportion male female Obviously female cats spayed male cats neutered. two cats fixed cats domestic cats (Felis catus). UK. three missing values reproductive conditions, among 101 cats, remove first cleaness example analysis. highest per month 17.5, spend 7.5 hours door; allowed hunt, number cats household varies; neutered spayed; dry food; Sex varies; age lower middle range. demonstration map function purrr package cats take try food, double number cats eat wet food eat. cats data types food Another compelling way show data graphics. can put another two functions waffle waffle package can also work ggplot Fig 2: Proportion dry dry food can also combine plots Fig 3: Proportion food consumption pattern Back analysis, first , whether allowed hunt, hours indoor, reproductive conditions seem related top predators. let’s look first. Hunters prey counts, higher outdoor hour average Spayed Neutered cats longer hours indoors average, higher prey per month average well. Next look numerical variables Fig 4: Comparison prey counts age Age show significant relationship prey counts Fig 5: Comparison prey counts hours indoor Higher hours door associated lower prey counts, lower hours door associated higher prey counts Fig 7: Comparison prey counts GPS strap time time cats GPS strapped show strong relationship prey counts. Fig 8: Comparison prey counts food type Although cats eating dry food show higher prey counts, counts imbalanced make conclusion","code":"map_dbl(df[map_lgl(df, is.numeric)], mean, na.rm = TRUE) #> prey_p_month  hrs_indoors       n_cats    age_years  #>     3.742574    11.856436     2.079208     5.420000 map_dbl(df[map_lgl(df, is.numeric)], var, na.rm = TRUE) #> prey_p_month  hrs_indoors       n_cats    age_years  #>   23.3430693   27.3316832    0.9936634   11.4581818 df %>%    group_by(animal_sex) %>%   summarise(count = n()) #> # A tibble: 2 × 2 #>   animal_sex count #>   <chr>      <int> #> 1 f             44 #> 2 m             57 df %>%    group_by(animal_sex) %>%   summarise(count = n()) %>%   waffle(rows = 5, legend_pos = \"bottom\", colors = c(\"#c7d4b6\", \"#a3aabd\"), title=\"Waffle plot of cat sex\") df %>%    filter(!is.na(animal_reproductive_condition))%>%    group_by(animal_sex, animal_reproductive_condition) %>%   summarise(count = n()) %>%   pivot_wider(names_from = \"animal_reproductive_condition\",               values_from = \"count\") #> `summarise()` has grouped output by 'animal_sex'. You can override using the #> `.groups` argument. #> # A tibble: 2 × 4 #> # Groups:   animal_sex [2] #>   animal_sex `Not fixed` Spayed Neutered #>   <chr>            <int>  <int>    <int> #> 1 f                    1     41       NA #> 2 m                    1     NA       55 unique(df$animal_taxon) #> [1] \"Felis catus\" unique(df$study_site) #> [1] \"UK\" sum(is.na(df$animal_reproductive_condition)) #> [1] 3 df %>%   select(tag_id, prey_p_month, hrs_indoors, hunt, n_cats,           animal_reproductive_condition, food_dry,           animal_sex, age_years) %>%    slice_max(prey_p_month, n = 5) #>               tag_id prey_p_month hrs_indoors hunt n_cats #> 1               Jago         17.5         7.5 TRUE      4 #> 2            Sid-Tag         17.5         7.5 TRUE      1 #> 3        Maxwell-Tag         17.5         7.5 TRUE      1 #> 4        Carrots-Tag         17.5         7.5 TRUE      4 #> 5           Spot-Tag         17.5         7.5 TRUE      4 #> 6 Macaulay Mccat-Tag         17.5         2.5 TRUE      2 #> 7          Ginge-Tag         17.5         2.5 TRUE      2 #>   animal_reproductive_condition food_dry animal_sex age_years #> 1                      Neutered     TRUE          m         2 #> 2                        Spayed     TRUE          f         4 #> 3                      Neutered     TRUE          m         6 #> 4                      Neutered     TRUE          m         3 #> 5                      Neutered     TRUE          m         2 #> 6                        Spayed     TRUE          f         6 #> 7                      Neutered     TRUE          m         3 map(df[,c(\"food_dry\", \"food_wet\", \"food_other\")], table, useNA = \"ifany\") #> $food_dry #>  #> FALSE  TRUE  #>     4    97  #>  #> $food_wet #>  #> FALSE  TRUE  #>    30    71  #>  #> $food_other #>  #> FALSE  TRUE  <NA>  #>    49    42    10 df %>%   count(food_dry) %>%   ggplot(aes(fill = food_dry, values = n)) +   geom_waffle(n_rows = 8, size = 0.33, colour = \"white\") +   scale_fill_manual(name = NULL,                     values = c(\"#BA182A\", \"#FFEDA0\"),                     labels = c(\"Not Dry\", \"Dry\")) +   coord_equal() +   theme_void() + ggtitle(\"Waffle plot of dry food count\",                           subtitle = \"each square represents one cat\") p1 <- df %>%    group_by(food_dry) %>%   summarise(count = n()) %>%   waffle(rows = 5, colors = c(\"#BA182A\", \"#FFEDA0\"), title =\"Waffle plot of dry food count\") p2 <- df %>%    group_by(food_wet) %>%   summarise(count = n()) %>%   waffle(rows = 5, colors = c(\"#BA182A\", \"#FFEDA0\"), title=\"Waffle plot of wet food count\") iron(p1, p2) df %>% filter(!is.na(hunt)) %>%   group_by(hunt) %>%   summarise(prey_p_month = mean(prey_p_month, na.rm = TRUE),             hrs_indoors = mean(hrs_indoors, na.rm = TRUE)) #> # A tibble: 2 × 3 #>   hunt  prey_p_month hrs_indoors #>   <lgl>        <dbl>       <dbl> #> 1 FALSE         0           14.8 #> 2 TRUE          4.67        11.2 df %>% filter(!is.na(animal_reproductive_condition)) %>%   group_by(animal_reproductive_condition) %>%   summarise(prey_p_month = mean(prey_p_month, na.rm = TRUE),             hrs_indoors = mean(hrs_indoors, na.rm = TRUE)) #> # A tibble: 3 × 3 #>   animal_reproductive_condition prey_p_month hrs_indoors #>   <chr>                                <dbl>       <dbl> #> 1 Neutered                              3.7         11.3 #> 2 Not fixed                             1.75         7.5 #> 3 Spayed                                3.84        12.9 df %>% filter(!is.na(food_dry)) %>%   group_by(food_dry) %>%   summarise(prey_p_month = mean(prey_p_month, na.rm = TRUE),             hrs_indoors = mean(hrs_indoors, na.rm = TRUE),             n_cats = mean(n_cats, na.rm = TRUE)) #> # A tibble: 2 × 4 #>   food_dry prey_p_month hrs_indoors n_cats #>   <lgl>           <dbl>       <dbl>  <dbl> #> 1 FALSE            5.25        13.8   2    #> 2 TRUE             3.68        11.8   2.08 ggplot(df[!is.na(df$age_years),], aes(x=age_years, y=prey_p_month, color = animal_sex)) +    geom_point() +    ggtitle(\"Scatter plot of domestic cats prey per month versus age\", subtitle = \"Colored by sex\") +    xlab(\"Age by year\") + ylab(\"Prey per month\") ggplot(data=df, aes(x=factor(hrs_indoors, levels = sort(unique(hrs_indoors))), y=prey_p_month, fill = as.factor(hrs_indoors))) +    geom_boxplot() +    ggtitle(\"Boxplot of domestic cats prey per month versus hours indoor\", subtitle = \"Colored by hours in door\") +    xlab(\"Hours indoor\") + ylab(\"Prey per month\") + theme(legend.position=\"none\") df %>%    mutate(strap_time = as.numeric(ymd_hms(df$deploy_off_date) - ymd_hms(df$deploy_on_date)) / 24) %>%   ggplot(aes(x=strap_time, y=prey_p_month, color = animal_sex)) +    geom_point() +    ggtitle(\"Scatter plot of domestic cats prey per month versus GPS strap time\", subtitle = \"Colored by sex\") +    xlab(\"Strap Time\") + ylab(\"Prey per month\") ggplot(df, aes(x=prey_p_month)) + geom_histogram() +   facet_grid(cols = vars(food_dry)) + xlab(\"prey per month\") +   ggtitle(\"Histogram of domestic cats prey per month\", subtitle = \"grouped by food type\") #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"/articles/Example-analysis.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Example analysis","text":"whether allowed hunt, hours indoor, reproductive conditions affect prey per month domestic cats","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bob Rudis. Author, maintainer. Dave Gandy. Author.            Font Awesome Andrew Breza. Contributor. Matthias Jütte. Contributor. Paul Campbell. Contributor.            geom_bar flip","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rudis B, Gandy D (2023). waffle: Create Waffle Chart Visualizations. R package version 1.0.2.","code":"@Manual{,   title = {waffle: Create Waffle Chart Visualizations},   author = {Bob Rudis and Dave Gandy},   year = {2023},   note = {R package version 1.0.2}, }"},{"path":"/index.html","id":"id_-waffle","dir":"","previous_headings":"","what":"Create Waffle Chart Visualizations","title":"Create Waffle Chart Visualizations","text":"Create Waffle Chart Visualizations Github Link original package: waffle Link deplopyed website: https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-yanxiliu230/ Customization: 1. change background color gray foreground text color darker gray 2. code block syntax highlighting theme a11y-light 3. link color purple 4. change base font Lato, head font Roboto Slab 5. edit navbar put article right side Original Author: Bob Rudis, Dave Gandy, Nora Liu","code":""},{"path":"/index.html","id":"goal-and-description","dir":"","previous_headings":"","what":"Goal and Description","title":"Create Waffle Chart Visualizations","text":"Square pie charts (.k.. waffle charts) can used communicate parts whole categorical quantities. emulate percentage view pie chart, 10x10 grid used square representing 1% total. Modern uses waffle charts necessarily adhere rule can created grid rectangular shape. Best practices suggest keeping number categories small, just done creating pie charts. Tools provided create waffle charts well stitch together, use glyphs making isotype pictograms. uses ggplot2 returns ggplot2 object.","code":""},{"path":"/index.html","id":"whats-inside-the-tin-exported-functions","dir":"","previous_headings":"","what":"What’s Inside the Tin (Exported Functions)","title":"Create Waffle Chart Visualizations","text":"following functions implemented: waffle: Make waffle (square pie) charts draw_key_pictogram: Legend builder pictograms fa_grep: Search Font Awesome glyph names pattern fa_list: List Font Awesome glyphs fa5_brand: Font Awesome 5 Brand fa5_solid: Font Awesome 5 Solid geom_pictogram: Pictogram Geom geom_waffle: Waffle (Square pie chart) Geom install_fa_fonts: Install Font Awesome 5 Fonts iron: Veritical, left-aligned layout waffle plots scale_label_pictogram: Used geom_pictogram() map Font Awesome fonts labels theme_enhance_waffle: Waffle chart theme cruft remover can used theme","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Waffle Chart Visualizations","text":"NOTE: use ‘remotes’ install options need {remotes} package installed.","code":"install.packages(\"waffle\") # NOTE: CRAN version is 0.7.0 # or remotes::install_github(\"hrbrmstr/waffle\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Create Waffle Chart Visualizations","text":"","code":"library(waffle) library(magrittr) library(hrbrthemes) library(ggplot2) library(dplyr) library(waffle)  # current verison packageVersion(\"waffle\") ## [1] '1.0.2'"},{"path":"/index.html","id":"some-new-bits-up-first","dir":"","previous_headings":"Usage","what":"Some new bits up first","title":"Create Waffle Chart Visualizations","text":"","code":"data.frame(   parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),   vals = c(10, 20, 30, 6, 14, 40, 30, 20, 10),   col = rep(c(\"navy\", \"black\", \"maroon\"), 3),   fct = c(     rep(\"Thing 1\", 3),     rep(\"Thing 2\", 3),     rep(\"Thing 3\", 3)   ) ) -> xdf  xdf %>%   count(parts, wt = vals) %>%   ggplot(     aes(fill = parts, values = n)   ) +   geom_waffle(     n_rows = 20,     size = 0.33,      colour = \"white\",     flip = TRUE   ) +   scale_fill_manual(     name = NULL,     values = c(\"#a40000\", \"#c68958\", \"#ae6056\"),     labels = c(\"Fruit\", \"Sammich\", \"Pizza\")   ) +   coord_equal() +   theme_ipsum_rc(grid=\"\") +   theme_enhance_waffle() xdf %>%   count(parts, wt = vals) %>%   ggplot(     aes(label = parts, values = n)   ) +   geom_pictogram(     n_rows = 10,      aes(colour = parts),      flip = TRUE,      make_proportional = TRUE   ) +   scale_color_manual(     name = NULL,     values = c(\"#a40000\", \"#c68958\", \"#ae6056\"),     labels = c(\"Fruit\", \"Sammich\", \"Pizza\")   ) +   scale_label_pictogram(     name = NULL,     values = c(\"apple-alt\", \"bread-slice\", \"pizza-slice\"),     labels = c(\"Fruit\", \"Sammich\", \"Pizza\")   ) +   coord_equal() +   theme_ipsum_rc(grid=\"\") +   theme_enhance_waffle() +   theme(     legend.key.height = unit(2.25, \"line\"),     legend.text = element_text(size = 10, hjust = 0, vjust = 0.75)   ) xdf %>%   count(parts, wt = vals) %>%   ggplot(     aes(label = parts, values = n)   ) +   geom_pictogram(     n_rows = 20,      size = 6,      aes(colour = parts),      flip = TRUE,     family = \"FontAwesome5Brands-Regular\"   ) +   scale_color_manual(     name = NULL,     values = c(\"#073f9c\", \"black\", \"#f34323\"),     labels = c(\"BitBucket\", \"GitHub\", \"Other\")   ) +   scale_label_pictogram(     name = NULL,     values = c(\"bitbucket\", \"github\", \"git-alt\"),     labels = c(\"BitBucket\", \"GitHub\", \"Other\")   ) +   coord_equal() +   theme_ipsum_rc(grid=\"\") +   theme_enhance_waffle() +   theme(     legend.text = element_text(hjust = 0, vjust = 1)   )"},{"path":"/index.html","id":"geoms","dir":"","previous_headings":"Usage","what":"Geoms!","title":"Create Waffle Chart Visualizations","text":"","code":"library(hrbrthemes) library(waffle) library(tidyverse)  tibble(   parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),   values = c(10, 20, 30, 6, 14, 40, 30, 20, 10),   fct = c(rep(\"Thing 1\", 3), rep(\"Thing 2\", 3), rep(\"Thing 3\", 3)) ) -> xdf  ggplot(   data = xdf,    aes(fill=parts, values=values) ) +   geom_waffle(     color = \"white\",      size = 1.125,      n_rows = 6   ) +   facet_wrap(~fct, ncol=1) +   scale_x_discrete(     expand = c(0,0,0,0)   ) +   scale_y_discrete(     expand = c(0,0,0,0)   ) +   ggthemes::scale_fill_tableau(name=NULL) +   coord_equal() +   labs(     title = \"Faceted Waffle Geoms\"   ) +   theme_ipsum_rc(grid=\"\") +   theme_enhance_waffle()"},{"path":"/index.html","id":"waffle-bar-charts-with-scales","dir":"","previous_headings":"Usage","what":"Waffle Bar Charts with scales!","title":"Create Waffle Chart Visualizations","text":"","code":"library(dplyr) library(waffle)  storms %>%    filter(year >= 2010) %>%    count(year, status) -> storms_df  ggplot(   data = storms_df,    aes(fill = status, values = n) ) +   geom_waffle(     color = \"white\",      size = .25,      n_rows = 10,      flip = TRUE   ) +   facet_wrap(     ~year,      nrow = 1,      strip.position = \"bottom\"   ) +   scale_x_discrete() +    scale_y_continuous(     labels = function(x) x * 10, # make this multiplier the same as n_rows     expand = c(0,0)   ) +   ggthemes::scale_fill_tableau(name=NULL) +   coord_equal() +   labs(     x = \"Year\", y = \"Count\",     title = \"Faceted Waffle Bar Chart\",     subtitle = \"{dplyr} storms data\"   ) +   theme_minimal(     base_family = \"Roboto Condensed\"   ) +   theme(     panel.grid = element_blank(),      axis.ticks.y = element_line()   ) +   guides(     fill = guide_legend(reverse = TRUE)   )"},{"path":"/index.html","id":"basic-example","dir":"","previous_headings":"Usage","what":"Basic example","title":"Create Waffle Chart Visualizations","text":"","code":"parts <- c(80, 30, 20, 10) waffle(parts, rows = 8)"},{"path":"/index.html","id":"use-a-data-frame","dir":"","previous_headings":"Usage","what":"Use a data frame","title":"Create Waffle Chart Visualizations","text":"","code":"parts <- data.frame(   names = LETTERS[1:4],   vals = c(80, 30, 20, 10) )  waffle(parts, rows = 8)"},{"path":"/index.html","id":"slightly-more-complex-example","dir":"","previous_headings":"Usage","what":"Slightly more complex example","title":"Create Waffle Chart Visualizations","text":"Health records breaches fraction US Population  One square == 1m ppl Health records breaches fraction US Population  (One square == 10m ppl)","code":"c(   `Un-breached\\nUS Population` = (318 - 11 - 79),    `Premera` = 11,    `Anthem` = 79 ) -> parts waffle(   parts = parts,    rows = 8,    size = 1,    colors = c(\"#969696\", \"#1879bf\", \"#009bda\"),   legend_pos = \"bottom\" ) waffle(   parts = parts / 10,    rows = 3,   colors = c(\"#969696\", \"#1879bf\", \"#009bda\") ) library(extrafont)  waffle(   parts = parts / 10,    rows = 3,    colors = c(\"#969696\", \"#1879bf\", \"#009bda\"),   use_glyph = \"medkit\",    size = 8 ) +    expand_limits(     y = c(0, 4)   )"},{"path":"/index.html","id":"replicating-an-old-favourite","dir":"","previous_headings":"Usage","what":"Replicating an old favourite","title":"Create Waffle Chart Visualizations","text":"Via: https://www.nytimes.com/2008/07/20/business/20debt.html Average Household Savings Year  (1 square == $392)","code":"c(   `Mortgage\\n($84,911)` = 84911,    `Auto and\\ntuition loans\\n($14,414)` = 14414,   `Home equity loans\\n($10,062)` = 10062,    `Credit Cards\\n($8,565)` = 8565 ) -> savings waffle(   parts = savings / 392,    rows = 7,    size = 0.5,    legend_pos = \"bottom\",   colors = c(\"#c7d4b6\", \"#a3aabd\", \"#a0d0de\", \"#97b5cf\") )"},{"path":"/index.html","id":"more-replication","dir":"","previous_headings":"Usage","what":"More replication","title":"Create Waffle Chart Visualizations","text":"Similar https://eagereyes.org/techniques/square-pie-charts","code":"professional <- c(`Male` = 44, `Female (56%)` = 56) waffle(   parts = professional,    rows = 10,    size = 0.5,   colors = c(\"#af9139\", \"#544616\") )"},{"path":"/index.html","id":"keeps-factor-by-default-levels-now","dir":"","previous_headings":"Usage","what":"Keeps factor by default levels now","title":"Create Waffle Chart Visualizations","text":":  Without (can disable via keep parameter now):  Professional Workforce Makeup  Iron example (left-align & padding multiple plots)","code":"iron(   waffle(     parts = c(thing1 = 0, thing2 = 100),      rows = 5   ),   waffle(     parts = c(thing1 = 25, thing2 = 75),      rows = 5   ) ) iron(   waffle(     parts = c(thing1 = 0, thing2 = 100),      rows = 5,      keep = FALSE   ),   waffle(     parts = c(thing1 = 25, thing2 = 75),      rows = 5,      keep = FALSE   ) ) pain.adult.1997 <- c(`YOY (406)` = 406, `Adult (24)` = 24)  waffle(   parts = pain.adult.1997 / 2,   rows = 7,    size = 0.5,   colors = c(\"#c7d4b6\", \"#a3aabd\"),   title = \"Paine Run Brook Trout Abundance (1997)\",   xlab = \"1 square = 2 fish\", pad = 3 ) -> A  pine.adult.1997 <- c(`YOY (221)` = 221, `Adult (143)` = 143)  waffle(   parts = pine.adult.1997 / 2,    rows = 7,    size = 0.5,   colors = c(\"#c7d4b6\", \"#a3aabd\"),   title = \"Piney River Brook Trout Abundance (1997)\",   xlab = \"1 square = 2 fish\", pad = 8 ) -> B  stan.adult.1997 <- c(`YOY (270)` = 270, `Adult (197)` = 197)  waffle(   parts = stan.adult.1997 / 2,    rows = 7,    size = 0.5,   colors = c(\"#c7d4b6\", \"#a3aabd\"),   title = \"Staunton River Trout Abundance (1997)\",   xlab = \"1 square = 2 fish\" ) -> C  iron(A, B, C)"},{"path":"/index.html","id":"package-code-metrics","dir":"","previous_headings":"","what":"Package Code Metrics","title":"Create Waffle Chart Visualizations","text":"{cloc} 📦 metrics waffle","code":"cloc::cloc_pkg_md()"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Create Waffle Chart Visualizations","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"/reference/draw_key_pictogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Legend builder for pictograms — draw_key_pictogram","title":"Legend builder for pictograms — draw_key_pictogram","text":"Legend builder pictograms","code":""},{"path":"/reference/draw_key_pictogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Legend builder for pictograms — draw_key_pictogram","text":"","code":"draw_key_pictogram(data, params, size)"},{"path":"/reference/draw_key_pictogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Legend builder for pictograms — draw_key_pictogram","text":"data, params, size legend key things","code":""},{"path":"/reference/fa5_brand.html","id":null,"dir":"Reference","previous_headings":"","what":"Font Awesome 5 Brand — fa5_brand","title":"Font Awesome 5 Brand — fa5_brand","text":"`fa5_brand` shorthand \"`FontAwesome5Brands-Regular`\"","code":""},{"path":"/reference/fa5_brand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Font Awesome 5 Brand — fa5_brand","text":"","code":"fa5_brand"},{"path":"/reference/fa5_brand.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Font Awesome 5 Brand — fa5_brand","text":"object class character length 1.","code":""},{"path":"/reference/fa5_solid.html","id":null,"dir":"Reference","previous_headings":"","what":"Font Awesome 5 Solid — fa5_solid","title":"Font Awesome 5 Solid — fa5_solid","text":"`fa5_solid` shorthand \"`FontAwesome5Free-Solid`\"","code":""},{"path":"/reference/fa5_solid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Font Awesome 5 Solid — fa5_solid","text":"","code":"fa5_solid"},{"path":"/reference/fa5_solid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Font Awesome 5 Solid — fa5_solid","text":"object class character length 1.","code":""},{"path":"/reference/fa_grep.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Font Awesome glyph names for a pattern — fa_grep","title":"Search Font Awesome glyph names for a pattern — fa_grep","text":"Search Font Awesome glyph names pattern","code":""},{"path":"/reference/fa_grep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Font Awesome glyph names for a pattern — fa_grep","text":"","code":"fa_grep(pattern)"},{"path":"/reference/fa_grep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Font Awesome glyph names for a pattern — fa_grep","text":"pattern pattern search names Font Awesome fonts","code":""},{"path":"/reference/fa_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List all Font Awesome glyphs — fa_list","title":"List all Font Awesome glyphs — fa_list","text":"List Font Awesome glyphs","code":""},{"path":"/reference/fa_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all Font Awesome glyphs — fa_list","text":"","code":"fa_list()"},{"path":"/reference/geom_pictogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Pictogram Geom — geom_pictogram","title":"Pictogram Geom — geom_pictogram","text":"two special/critical aes() mappings: label (geom knows column map glyphs ) values (column mapping filling squares )","code":""},{"path":"/reference/geom_pictogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pictogram Geom — geom_pictogram","text":"","code":"geom_pictogram(   mapping = NULL,   data = NULL,   n_rows = 10,   make_proportional = FALSE,   flip = FALSE,   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  GeomPictogram"},{"path":"/reference/geom_pictogram.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pictogram Geom — geom_pictogram","text":"object class GeomPictogram (inherits GeomText, Geom, ggproto, gg) length 5.","code":""},{"path":"/reference/geom_pictogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pictogram Geom — geom_pictogram","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame., used layer data. n_rows many rows waffle chart? default 10 make_proportional compute proportions raw values? (.e. value n replaced n/sum(n)); default FALSE. flip TRUE, flip x y coords. n_rows becomes n_cols. Useful achieve waffle column chart effect. Defaults FALSE. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like color = \"red\" size = 3. may also parameters paired geom/stat. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"/reference/geom_waffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Waffle (Square pie chart) Geom — geom_waffle","title":"Waffle (Square pie chart) Geom — geom_waffle","text":"two special/critical aes() mappings: fill (geom knows column map fills ) values (column mapping filling squares )","code":""},{"path":"/reference/geom_waffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Waffle (Square pie chart) Geom — geom_waffle","text":"","code":"geom_waffle(   mapping = NULL,   data = NULL,   n_rows = 10,   make_proportional = FALSE,   flip = FALSE,   na.rm = FALSE,   show.legend = NA,   radius = grid::unit(0, \"npc\"),   inherit.aes = TRUE,   ... )  GeomWaffle  stat_waffle(   mapping = NULL,   data = NULL,   geom = \"waffle\",   n_rows = 10,   make_proportional = FALSE,   flip = FALSE,   radius = grid::unit(0, \"npc\"),   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )  StatWaffle"},{"path":"/reference/geom_waffle.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Waffle (Square pie chart) Geom — geom_waffle","text":"object class GeomWaffle (inherits GeomRtile, GeomRrect, Geom, ggproto, gg) length 5. object class StatWaffle (inherits Stat, ggproto, gg) length 8.","code":""},{"path":"/reference/geom_waffle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Waffle (Square pie chart) Geom — geom_waffle","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame., used layer data. n_rows many rows waffle chart? default 10 make_proportional compute proportions raw values? (.e. value n replaced n/sum(n)); default FALSE. flip TRUE, flip x y coords. n_rows becomes n_cols. Useful achieve waffle column chart effect. Defaults FALSE. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. radius radius round squares inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like color = \"red\" size = 3. may also parameters paired geom/stat. geom geom use (default \"waffle\")","code":""},{"path":"/reference/geom_waffle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Waffle (Square pie chart) Geom — geom_waffle","text":"","code":"data.frame(   parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),   vals = c(10, 20, 30, 6, 14, 40, 30, 20, 10),   fct = c(rep(\"Thing 1\", 3), rep(\"Thing 2\", 3), rep(\"Thing 3\", 3)) ) -> xdf  ggplot(xdf, aes(fill = parts, values = vals)) +   geom_waffle() +   facet_wrap(~fct)"},{"path":"/reference/install_fa_fonts.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Font Awesome 5 Fonts — install_fa_fonts","title":"Install Font Awesome 5 Fonts — install_fa_fonts","text":"Install Font Awesome 5 Fonts","code":""},{"path":"/reference/install_fa_fonts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Font Awesome 5 Fonts — install_fa_fonts","text":"","code":"install_fa_fonts()"},{"path":"/reference/iron.html","id":null,"dir":"Reference","previous_headings":"","what":"Veritical, left-aligned layout for waffle plots — iron","title":"Veritical, left-aligned layout for waffle plots — iron","text":"Left-align waffle plots x-axis. Use pad parameter waffle pad plot max width (num squares), otherwise plots scaled.","code":""},{"path":"/reference/iron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Veritical, left-aligned layout for waffle plots — iron","text":"","code":"iron(...)"},{"path":"/reference/iron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Veritical, left-aligned layout for waffle plots — iron","text":"... one waffle plots","code":""},{"path":"/reference/iron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Veritical, left-aligned layout for waffle plots — iron","text":"","code":"parts <- c(80, 30, 20, 10) w1 <- waffle(parts, rows=8) w2 <- waffle(parts, rows=8) w3 <- waffle(parts, rows=8) # print chart ## iron(w1, w2, w3)"},{"path":"/reference/scale_label_pictogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Used with geom_pictogram() to map Font Awesome fonts to labels — scale_label_pictogram","title":"Used with geom_pictogram() to map Font Awesome fonts to labels — scale_label_pictogram","text":"Used geom_pictogram() map Font Awesome fonts labels","code":""},{"path":"/reference/scale_label_pictogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Used with geom_pictogram() to map Font Awesome fonts to labels — scale_label_pictogram","text":"","code":"scale_label_pictogram(..., values, aesthetics = \"label\")"},{"path":"/reference/scale_label_pictogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Used with geom_pictogram() to map Font Awesome fonts to labels — scale_label_pictogram","text":"... dots values values aesthetics aesthetics","code":""},{"path":"/reference/theme_enhance_waffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Waffle chart theme cruft remover that can be used with any other theme — theme_enhance_waffle","title":"Waffle chart theme cruft remover that can be used with any other theme — theme_enhance_waffle","text":"Removes:","code":""},{"path":"/reference/theme_enhance_waffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Waffle chart theme cruft remover that can be used with any other theme — theme_enhance_waffle","text":"","code":"theme_enhance_waffle()"},{"path":"/reference/theme_enhance_waffle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Waffle chart theme cruft remover that can be used with any other theme — theme_enhance_waffle","text":"panel grid axis text axis ticks axis titles","code":""},{"path":"/reference/waffle-package.html","id":null,"dir":"Reference","previous_headings":"","what":"A package to make waffle charts (square pie charts) in R. — waffle-package","title":"A package to make waffle charts (square pie charts) in R. — waffle-package","text":"glyphs: Font Awesome Dave Gandy - http://fontawesome.io License: SIL OFL 1.1 URL: http://scripts.sil.org/OFL","code":""},{"path":"/reference/waffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Make waffle (square pie) charts — waffle","title":"Make waffle (square pie) charts — waffle","text":"Given named vector data frame, function return ggplot object represents waffle chart values. individual values summed total number squares grid. can perform appropriate value transformation ahead time get desired waffle layout/effect.","code":""},{"path":"/reference/waffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make waffle (square pie) charts — waffle","text":"","code":"waffle(   parts,   rows = 10,   keep = TRUE,   xlab = NULL,   title = NULL,   colors = NA,   size = 2,   flip = FALSE,   reverse = FALSE,   equal = TRUE,   pad = 0,   use_glyph = FALSE,   glyph_size = 12,   glyph_font = \"Font Awesome 5 Free Solid\",   glyph_font_family = \"FontAwesome5Free-Solid\",   legend_pos = \"right\" )"},{"path":"/reference/waffle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make waffle (square pie) charts — waffle","text":"parts named vector values data frame use chart rows number rows blocks keep keep factor levels (.e. consistent legends across waffle plots) xlab text chart. Highly suggested used give \"1 sq == xyz\" relationship obvious title chart title colors exactly number colors values parts. omitted, Color Brewer \"Set2\" colors used. size width separator blocks (defaults 2) flip flips x & y axes reverse reverses order data equal default, waffle uses coord_equal; can cause layout problems, use disable using ggsave knitr control output sizes (manually sizing chart) pad many blocks right-pad grid use_glyph use specified glyph; using built-Font Awesome, can glyph name; otherwise, must unicode glyph custom font caller using. glyph_size size Font Awesome font glyph_font, glyph_font_family use_glyph FALSE, gplyph_font looked font database glpyph_font_family used family parameter ggplot font display since fonts R, Python anythign relies legacy font C libraries woefully messed . may need adjust either \"font\" parameters depending system & OS version due fact font names different even OS versions (sometimes). package comes Font Awesome helpers . Use fonts requires caller familiar using fonts R. FONTS work ggplot2 definitely graphics devices ggplot2. legend_pos position legend","code":""},{"path":"/reference/waffle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make waffle (square pie) charts — waffle","text":"data frame used, first two columns contain desired names values, respectively. vector named partially named, capital letters used instead. highly suggested limit number elements plot, just like ever got wasted decided regular pie chart good thing create decide totally evil make one pollute beautiful world . Chart title x-axis labels optional, especially just exporting another program use/display. specify string (vs FALSE) use_glyph function map input Font Awesome glyph name use glyph tile instead block (making like isotype pictogram waffle chart). need install Font Awesome 5 use extrafont package able use Font Awesome 5 glyphs. Sizing also user since fonts automatically scale graphic resize. Glyph idea inspired Ruben C. Arslan (@_r_c_a)","code":""},{"path":"/reference/waffle.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Make waffle (square pie) charts — waffle","text":"MUST use Font Awesome 5 fonts bundled package. See install_fa_fonts().","code":""},{"path":"/reference/waffle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make waffle (square pie) charts — waffle","text":"","code":"parts <- c(80, 30, 20, 10) waffle(parts, rows=8)   parts <- data.frame(   names = LETTERS[1:4],   vals = c(80, 30, 20, 10) )  waffle(parts, rows=8)   # library(extrafont) # waffle(parts, rows=8, use_glyph=\"shield\")  parts <- c(One=80, Two=30, Three=20, Four=10) chart <- waffle(parts, rows=8) # print(chart)"}]
